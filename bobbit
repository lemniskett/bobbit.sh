#!/bin/sh
# shellcheck disable=SC2068,SC3061

FIFO_PATH="${FIFO_PATH:-./bobbitd.fifo}"
DATA_DIR="${DATA_DIR:-./data}"
SEPARATOR="---"

help() {
    cat <<EOL
$0: <subcommand> [<args...>]

  create <job_id> <command>   Create a job.
  wait <job_id>               Wait for a job and exits with the exit code.
  tail <job_id>               Prints logs of a job.
  list                        Lists all running jobs
  is-running                  Checks if bobbitd is running
EOL
}

err() {
    echo "$2" >&2
    exit "$1"
}

ensure_args() {
    args_count=$1
    args_required=$2
    if [ "$args_count" -ne "$args_required" ]; then
        help
        exit 2
    fi
}

ensure_correct() {
    if [ -z "$1" ]; then
        help
        exit 2
    fi
}

ensure_running() {
    if [ ! -p "$FIFO_PATH" ]; then
        err 3 "$FIFO_PATH is not a valid named pipe, is bobbitd running?"
    fi
}

case "$1" in
    create)
        shift
        ensure_args $# 2
        id="$1"
        command="$2"

        job_fifo="$DATA_DIR/$id.fifo"

        ensure_correct "$id"
        ensure_correct "$command"
        ensure_running

        if [ -p "$job_fifo" ]; then
            err 4 "Job \"$id\" is in progress"
        fi

        echo "${id}${SEPARATOR}${command}" > "$FIFO_PATH"
    ;;
    wait)
        shift
        ensure_args $# 1
        id="$1"

        ensure_correct "$id"
        ensure_running

        job_lock="$DATA_DIR/$id.lock"
        job_exitcode="$DATA_DIR/$id.exitcode"

        if [ -f "$job_exitcode" ]; then
            read -r exitcode < "$job_exitcode"
            if [ "$exitcode" -ne 0 ]; then
                err 7 "Job \"$id\" exited with code: $exitcode"
            fi
            exit 0
        fi

        if [ ! -f "$job_lock" ]; then
            err 5 "Job \"$id\" doesn't exist"
        fi

        while true; do
            [ ! -f "$job_lock" ] && break
            sleep 1
        done

        read -r exitcode < "$job_exitcode"
        if [ "$exitcode" -ne 0 ]; then
            err 7 "Job \"$id\" exited with code: $exitcode"
        fi
        exit 0
    ;;
    tail)
        shift
        ensure_args $# 1
        id="$1"

        ensure_correct "$id"
        ensure_running

        job_lock="$DATA_DIR/$id.lock"
        job_log="$DATA_DIR/$id.log"

        if [ ! -f "$job_lock" ]; then
            err 6 "Job \"$id\" is not running"
        fi

        tail -f "$job_log"
    ;;
    list)
        shift
        ensure_args $# 0

        ensure_running

        cd "$DATA_DIR" || exit 1
        find . -name '*.lock' | sed -e 's#^\./##g' -e 's#\.lock$##g'
    ;;
    is-running)
        shift
        ensure_args $# 0

        ensure_running
    ;;
    help)
        help
    ;;
    *)
        help
        exit 1
    ;;
esac